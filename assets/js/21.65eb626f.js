(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{410:function(t,e,a){"use strict";a.r(e);var s=a(41),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[t._v("#")]),t._v(" Commands")]),t._v(" "),a("p",[t._v("No commands are registered by default. Cmdr ships with a set of default commands, which can be loaded if you so wish by calling "),a("code",[t._v("Cmdr:RegisterDefaultCommands()")]),t._v(". See "),a("a",{attrs:{href:"#default-commands"}},[t._v("Default Commands")]),t._v(" for a list.")]),t._v(" "),a("p",[t._v("Custom commands are defined in ModuleScripts that return a single table.")]),t._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Teleport.lua, inside your commands folder as defined above.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"teleport"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tAliases "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDescription "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Teleports a player or set of players to one target."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tGroup "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Admin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tArgs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"players"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tDescription "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The players to teleport"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"player"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"to"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tDescription "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The player to teleport to"')]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("Check out the "),a("ApiLink",{attrs:{to:"Registry.CommandDefinition"}},[t._v("API reference")]),t._v(" full details.")],1),t._v(" "),a("p",[t._v('The implementation should be in a separate ModuleScript. Cmdr will never deliver the server implementation to the client. This module should only return one function. The module must be named the same thing as the definition module as described above, with the word "Server" appended to the end.')]),t._v(" "),a("p",[t._v("It is passed the CommandContext for this command, which is a special object that represents a single command run. The context can be used to get the executing player, send events, reply with additional lines in the console, and more. See CommandContext in the API section below for more details. After the context, any arguments you defined in the command definition will be passed in order.")]),t._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- TeleportServer.lua")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- These arguments are guaranteed to exist and be correctly typed.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromPlayers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" toPlayer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" toPlayer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Character "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" toPlayer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindFirstChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HumanoidRootPart"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" toPlayer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Character"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HumanoidRootPart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CFrame\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" player "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ipairs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fromPlayers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Character "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Character"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindFirstChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HumanoidRootPart"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n        player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Character"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HumanoidRootPart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CFrame "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" position\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Teleported players."')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Target player has no character."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("Take a gander at the "),a("a",{attrs:{href:"https://github.com/evaera/Cmdr/tree/master/Cmdr/BuiltInCommands",target:"_blank",rel:"noopener noreferrer"}},[t._v("built-in commands"),a("OutboundLink")],1),t._v(" for more examples.")]),t._v(" "),a("h2",{attrs:{id:"command-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-data"}},[t._v("#")]),t._v(" Command Data")]),t._v(" "),a("p",[t._v("If you need to gather some data from the client before the command runs, you can create a "),a("ApiLink",{attrs:{to:"Registry.CommandDefinition"}},[a("code",[t._v("Data")])]),t._v(" function in your command. This function will run on the client, and whatever is returned from it will be available with "),a("code",[t._v("context:GetData()")]),t._v(" in the command implementation.")],1),t._v(" "),a("p",[t._v("As an example, you might want to know the local player's current mouse world position in a server command. This can be achieved by returning "),a("code",[t._v("LocalPlayer:GetMouse().Hit.Position")]),t._v(" from the Data function, then using "),a("code",[t._v("context:GetData()")]),t._v(" to get the Vector3.")]),t._v(" "),a("p",[a("code",[t._v("context:GetData()")]),t._v(" will work on both client and server commands.")]),t._v(" "),a("h2",{attrs:{id:"client-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-commands"}},[t._v("#")]),t._v(" Client commands")]),t._v(" "),a("p",[t._v("It is possible to have commands that run on the client exclusively or both.")]),t._v(" "),a("p",[t._v("If you want your command to run on the client, you can add a "),a("ApiLink",{attrs:{to:"Registry.CommandDefinition"}},[a("code",[t._v("ClientRun")])]),t._v(" function to the command definition itself. It works exactly like the function that you would return from the Server module.")],1),t._v(" "),a("p",[t._v("If using "),a("code",[t._v("ClientRun")]),t._v(", having a Server module associated with this command is optional.")]),t._v(" "),a("ul",[a("li",[t._v("If your "),a("code",[t._v("ClientRun")]),t._v(" function returns a string, the command will run entirely on the client and won't touch the server at all (which means server-only hooks won't run).")]),t._v(" "),a("li",[t._v("If this function doesn't return anything, it will then execute the associated Server module implementation on the server.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("If this function is present and there isn't a Server module for this command, it is considered an error to not return a string from this function.")])]),t._v(" "),a("h2",{attrs:{id:"execution-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execution-order"}},[t._v("#")]),t._v(" Execution order")]),t._v(" "),a("p",[t._v("Including "),a("RouterLink",{attrs:{to:"/guide/Hooks.html"}},[t._v("Hooks")]),t._v(", the full execution order is:")],1),t._v(" "),a("ol",[a("li",[a("code",[t._v("BeforeRun")]),t._v(" hook on client.")]),t._v(" "),a("li",[a("code",[t._v("Data")]),t._v(" function on client.")]),t._v(" "),a("li",[a("code",[t._v("ClientRun")]),t._v(" function on client.")]),t._v(" "),a("li",[a("code",[t._v("BeforeRun")]),t._v(" hook on server. *")]),t._v(" "),a("li",[t._v("Server command implementation returned from Server module. *")]),t._v(" "),a("li",[a("code",[t._v("AfterRun")]),t._v(" hook on server. *")]),t._v(" "),a("li",[a("code",[t._v("AfterRun")]),t._v(" hook on client.")])]),t._v(" "),a("p",[t._v("* Only runs if "),a("code",[t._v("ClientRun")]),t._v(" isn't present or "),a("code",[t._v("ClientRun")]),t._v(" returns "),a("code",[t._v("nil")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"default-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-commands"}},[t._v("#")]),t._v(" Default Commands")]),t._v(" "),a("p",[t._v("If you run "),a("code",[t._v("Cmdr:RegisterDefaultCommands()")]),t._v(", these commands will be available with the following "),a("code",[t._v("Group")]),t._v("s:")]),t._v(" "),a("p",[t._v("Group: "),a("code",[t._v("DefaultAdmin")]),t._v(": "),a("code",[t._v("announce")]),t._v(" ("),a("code",[t._v("m")]),t._v("), "),a("code",[t._v("bring")]),t._v(", "),a("code",[t._v("kick")]),t._v(", "),a("code",[t._v("teleport")]),t._v(" ("),a("code",[t._v("tp")]),t._v("), "),a("code",[t._v("kill")]),t._v(", "),a("code",[t._v("respawn")])]),t._v(" "),a("p",[t._v("Group: "),a("code",[t._v("DefaultDebug")]),t._v(": "),a("code",[t._v("to")]),t._v(", "),a("code",[t._v("blink")]),t._v(" ("),a("code",[t._v("b")]),t._v("), "),a("code",[t._v("thru")]),t._v(" ("),a("code",[t._v("t")]),t._v("), "),a("code",[t._v("position")]),t._v(", "),a("code",[t._v("version")])]),t._v(" "),a("p",[t._v("Group: "),a("code",[t._v("DefaultUtil")]),t._v(": "),a("code",[t._v("alias")]),t._v(", "),a("code",[t._v("bind")]),t._v(", "),a("code",[t._v("unbind")]),t._v(", "),a("code",[t._v("run")]),t._v(", "),a("code",[t._v("runif")]),t._v(", "),a("code",[t._v("echo")]),t._v(", "),a("code",[t._v("hover")]),t._v(", "),a("code",[t._v("replace")]),t._v(", "),a("code",[t._v("history")])]),t._v(" "),a("p",[t._v("Group: "),a("code",[t._v("Help")]),t._v(": "),a("code",[t._v("help")])]),t._v(" "),a("h3",{attrs:{id:"registering-a-subset-of-the-default-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registering-a-subset-of-the-default-commands"}},[t._v("#")]),t._v(" Registering a subset of the default commands")]),t._v(" "),a("p",[t._v("If you only want some, but not all, of the default commands, you can restrict the commands that you register in two ways.")]),t._v(" "),a("ol",[a("li",[t._v("Pass an array of groups to the RegisterDefaultCommands function: "),a("code",[t._v('Cmdr:RegisterDefaultCommands({"Help", "DefaultUtil"})')])]),t._v(" "),a("li",[t._v("Pass a filter function that accepts a CommandDefinition and either returns "),a("code",[t._v("true")]),t._v(" or "),a("code",[t._v("false")]),t._v(":")])]),t._v(" "),a("div",{staticClass:"language-lua line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[t._v("Cmdr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegisterDefaultCommands")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- This is absurd... but possible!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"prefixed-union-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prefixed-union-types"}},[t._v("#")]),t._v(" Prefixed Union Types")]),t._v(" "),a("p",[t._v("An argument can be allowed to accept a different type when starting with a specific prefix. The most common example of this is with the "),a("code",[t._v("players")]),t._v(" type, which when prefixed with % allows the user to select players based on team, rather than name.")]),t._v(" "),a("p",[t._v("These can be defined on a per-argument basis, so that your commands can accept many types of arguments in a single slot. Under the Args section of command definition, each argument has a "),a("code",[t._v("Type")]),t._v(" key.  For arguments that accept only a single type, it would look like "),a("code",[t._v('Type = "string"')]),t._v(". If we also wanted to accept a number when the user prefixes the argument with "),a("code",[t._v("#")]),t._v(", we could change it to: "),a("code",[t._v('Type = "string # number"')]),t._v(". Then, if the user provided "),a("code",[t._v("#33")]),t._v(" for this argument, your function would be delivered the number value "),a("code",[t._v("33")]),t._v(" in that position.")]),t._v(" "),a("p",[t._v("This is infinitely expandable, and you can include as many prefixed union types as you wish: "),a("code",[t._v('Type = "string # number @ player % team"')]),t._v(", etc. Remember that there must be a space between the symbol and the type.")]),t._v(" "),a("p",[t._v("Some default types automatically have a prefixed union type applied to them, because they would both resolve to the same type in the end. For example, whenever you define an argument of type "),a("code",[t._v("players")]),t._v(", under the hood this is perceived as "),a("code",[t._v("players % teamPlayers")]),t._v(". ("),a("code",[t._v("teamPlayers")]),t._v(" is a type that matches based on team name, but resolves to an array of Players: the same thing that the normal "),a("code",[t._v("players")]),t._v(" type would resolve with.)")]),t._v(" "),a("p",[t._v("Here is a list of automatic prefixed union types:")]),t._v(" "),a("hr"),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Union")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("players")])]),t._v(" "),a("td",[a("code",[t._v("players % teamPlayers")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("playerId")])]),t._v(" "),a("td",[a("code",[t._v("playerId # integer")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("playerIds")])]),t._v(" "),a("td",[a("code",[t._v("playerIds # integers")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("brickColor")])]),t._v(" "),a("td",[a("code",[t._v("brickColor % teamColor")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("brickColors")])]),t._v(" "),a("td",[a("code",[t._v("brickColors % teamColors")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("color3")])]),t._v(" "),a("td",[a("code",[t._v("color3 # hexColor3 ! brickColor3")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("color3s")])]),t._v(" "),a("td",[a("code",[t._v("color3s # hexColor3s ! brickColor3s")])])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);